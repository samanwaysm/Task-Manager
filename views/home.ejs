<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Task Management</title>
    <!-- Bootstrap CSS -->
    <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="/assets/css/home.css">
    <!-- SweetAlert2 CSS -->
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@10.16.7/dist/sweetalert2.min.css">
</head>

<body>
    <div class="container-fluid">
        <div class="row navbar bg-primary text-white py-2">
            <div class="col d-flex align-items-center">
                <img src="/logo/notes.png" alt="Logo" class="logo mr-2">
            </div>
            <div class="col text-right">
                <form action="/api/logout" method="post">
                    <button class="btn btn-danger">Logout</button>
                </form>
            </div>
        </div>
        <div class="row justify-content-center">
            <div class="col-12 my-3">
                <button class="btn btn-primary" data-toggle="modal" data-target="#addTaskModal">Add Task</button>
            </div>
        </div>
        <div class="row justify-content-between ">
            <div class="col-12">
                <div class="search-sort-box bg-white p-3 mb-3 shadow rounded">
                    <form id="searchForm">
                        <div class="form-row">
                            <div class="form-group col-md-8">
                                <input type="text" class="form-control" id="searchQuery" placeholder="Search...">
                            </div>
                            <div class="form-group col-md-4">
                                <select class="form-control" id="sortBy">
                                    <option value="" disabled selected>Select</option>
                                    <option value="recent">Recent</option>
                                    <option value="oldest">Oldest</option>
                                </select>
                            </div>
                        </div>
                    </form>
                    <!-- <form>
                        <div class="form-row">
                            <div class="form-group col-md-8">
                                <input type="text" class="form-control" placeholder="Search...">
                            </div>
                            <div class="form-group col-md-4">
                                <select class="form-control">
                                    <option>Recent</option>
                                    <option>Oldest</option>
                                </select>
                            </div>
                        </div>
                    </form> -->
                </div>
            </div>
        </div>
        <div class="row">
            <!-- TODO Column -->
            <div class="col-12 col-md-4 p-3">
                <div class="todo-list bg-white p-3 shadow rounded mb-4 h-100" style="max-height: fit-content;">
                    <h4 class="text-primary">TODO</h4>
                    <% let todoTasks=tasks.filter(task=> task.status === 'todo'); %>
                    <% if (todoTasks.length === 0) { %>
                        <p class="noTaskMessage" >No Task Available.</p>
                    <% } %>
                    <div id="sortable1" class="connectedSortable h-100" style="cursor: pointer;" data-status="todo">
                        <% todoTasks.forEach(task=> { %>
                            <div class="task bg-light p-3 mb-2 rounded" data-task-id="<%= task._id %>">
                                <h5>
                                    <%= task.task %>
                                </h5>
                                <p>
                                    <%= task.description %>
                                </p>
                                <small>Created at: <%= new Date(task.createdAt).toLocaleString() %></small>
                                <div class="mt-2">
                                    <button class="btn btn-danger btn-sm delete-task-btn"
                                        data-task-id="<%= task._id %>">Delete</button>
                                    <button class="btn btn-info btn-sm edit-task-btn"
                                        data-task-id="<%= task._id %>" data-task="<%= task.task %>"
                                        data-description="<%= task.description %>">Edit</button>
                                    <button class="btn btn-secondary btn-sm view-task-btn"
                                        data-task-id="<%= task._id %>" data-task="<%= task.task %>"
                                        data-description="<%= task.description %>"
                                        data-created-at="<%= new Date(task.createdAt).toLocaleString() %>">View
                                        Details</button>
                                </div>
                            </div>
                        <% }) %>
                    </div>
                </div>
            </div>
            <!-- IN PROGRESS Column -->
            <div class="col-12 col-md-4 p-3">
                <div class="todo-list bg-white p-3 shadow rounded mb-4 h-100" style="max-height: fit-content;">
                    <h4 class="text-primary">IN PROGRESS</h4>
                    <% let inProgressTasks=tasks.filter(task=> task.status === 'inProgress'); %>
                    <% if (inProgressTasks.length === 0) { %>
                        <p class="noTaskMessage">No Task Available.</p>
                    <% } %>
                    <div id="sortable2" class="connectedSortable h-100" data-status="inProgress">
                        <% inProgressTasks.forEach(task=> { %>
                            <div class="task bg-light p-3 mb-2 rounded" style="cursor: pointer;" data-task-id="<%= task._id %>">
                                <h5>
                                    <%= task.task %>
                                </h5>
                                <p>
                                    <%= task.description %>
                                </p>
                                <small>Created at: <%= new Date(task.createdAt).toLocaleString() %></small>
                                <div class="mt-2">
                                    <button class="btn btn-danger btn-sm delete-task-btn"
                                        data-task-id="<%= task._id %>">Delete</button>
                                    <button class="btn btn-info btn-sm edit-task-btn"
                                        data-task-id="<%= task._id %>" data-task="<%= task.task %>"
                                        data-description="<%= task.description %>">Edit</button>
                                    <button class="btn btn-secondary btn-sm view-task-btn"
                                        data-task-id="<%= task._id %>" data-task="<%= task.task %>"
                                        data-description="<%= task.description %>"
                                        data-created-at="<%= new Date(task.createdAt).toLocaleString() %>">View
                                        Details</button>
                                </div>
                            </div>
                        <% }) %>
                    </div>
                </div>
            </div>
            <!-- DONE Column -->
            <div class="col-12 col-md-4 p-3">
                <div class="todo-list bg-white p-3 shadow rounded mb-4 h-100" style="max-height: fit-content;">
                    <h4 class="text-primary">DONE</h4>
                    <% let doneTasks=tasks.filter(task=> task.status === 'done'); %>
                    <% if (doneTasks.length === 0) { %>
                        <p class="noTaskMessage">No Task Available.</p>
                    <% } %>
                    <div id="sortable3" class="connectedSortable h-100" data-status="done">
                        <% doneTasks.forEach(task=> { %>
                            <div class="task bg-light p-3 mb-2 rounded" style="cursor: pointer;" data-task-id="<%= task._id %>">
                                <h5>
                                    <%= task.task %>
                                </h5>
                                <p>
                                    <%= task.description %>
                                </p>
                                <small>Created at: <%= new Date(task.createdAt).toLocaleString() %></small>
                                <div class="mt-2">
                                    <button class="btn btn-danger btn-sm delete-task-btn"
                                        data-task-id="<%= task._id %>">Delete</button>
                                    <button class="btn btn-info btn-sm edit-task-btn"
                                        data-task-id="<%= task._id %>" data-task="<%= task.task %>"
                                        data-description="<%= task.description %>">Edit</button>
                                    <button class="btn btn-secondary btn-sm view-task-btn"
                                        data-task-id="<%= task._id %>" data-task="<%= task.task %>"
                                        data-description="<%= task.description %>"
                                        data-created-at="<%= new Date(task.createdAt).toLocaleString() %>">View
                                        Details</button>
                                </div>
                            </div>
                        <% }) %>
                    </div>
                </div>
            </div>
        </div>
    </div>
    </div>

    <!-- Modal -->
    <div class="modal fade" id="addTaskModal" tabindex="-1" role="dialog" aria-labelledby="addTaskModalLabel"
        aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addTaskModalLabel">Add Task</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <form action="/api/addTask" method="post" id="addTaskForm">
                    <div class="modal-body">
                        <div class="form-group">
                            <label for="taskTitle">Title</label>
                            <input type="text" class="form-control" id="taskTitle" name="task"
                                placeholder="Enter task title">
                        </div>
                        <div class="form-group">
                            <label for="taskDescription">Description</label>
                            <textarea class="form-control" id="taskDescription" name="description" rows="3"
                                placeholder="Enter task description"></textarea>
                        </div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                        <button type="submit" class="btn btn-primary" id="saveTaskButton">Save</button>
                    </div>
                </form>

            </div>
        </div>
    </div>

    <!-- View Task Modal -->
    <div class="modal fade" id="viewTaskModal" tabindex="-1" role="dialog" aria-labelledby="viewTaskModalLabel"
        aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="viewTaskModalLabel">Task Details</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p id="viewTaskTitle"></p>
                    <p id="viewTaskDescription"></p>
                    <p id="viewTaskCreatedAt"></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Edit Task Modal -->
    <div class="modal fade" id="editTaskModal" tabindex="-1" role="dialog" aria-labelledby="editTaskModalLabel"
        aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="editTaskModalLabel">Edit Task</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <form id="editTaskForm">
                        <input type="hidden" id="editTaskId">
                        <div class="form-group">
                            <label for="editTaskTitle">Title</label>
                            <input type="text" class="form-control" id="editTaskTitle" placeholder="Enter task title">
                        </div>
                        <div class="form-group">
                            <label for="editTaskDescription">Description</label>
                            <textarea class="form-control" id="editTaskDescription" rows="3"
                                placeholder="Enter task description"></textarea>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" id="saveEditTaskBtn">Save</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Delete Task Modal -->
    <div class="modal fade" id="deleteTaskModal" tabindex="-1" role="dialog" aria-labelledby="deleteTaskModalLabel"
        aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="deleteTaskModalLabel">Delete Task</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete this task?</p>
                    <p id="deleteTaskTitle"></p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-danger" id="confirmDeleteTaskBtn">Delete</button>
                </div>
            </div>
        </div>
    </div>



    <!-- jQuery library -->
    <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>

    <!-- jQuery UI library -->
    <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.min.js"></script>

    <!-- Bootstrap JS and dependencies -->
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.5.4/dist/umd/popper.min.js"></script>
    <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

    <!-- Axios for HTTP requests -->
    <!-- <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script> -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/1.7.2/axios.min.js"
        integrity="sha512-JSCFHhKDilTRRXe9ak/FJ28dcpOJxzQaCd3Xg8MyF6XFjODhy/YMCM8HW0TFDckNHWUewW+kfvhin43hKtJxAw=="
        crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10.16.7/dist/sweetalert2.all.min.js"></script>


    <!-- <script>
        $(function () {
            $("#sortable1, #sortable2, #sortable3").sortable({
                connectWith: ".connectedSortable",
                stop: function (event, ui) {
                    const draggedElement = ui.item;
                    const taskId = draggedElement.attr('data-task-id'); // Assuming a data attribute for task ID (optional)

                    // Get the receiver container's data-id attribute
                    const status = ui.item.parent().attr('data-status');

                    console.log(taskId, status);

                    // Send data (draggedElementId, receiverContainerId) to server using AJAX
                    $.ajax({
                        url: '/api/updateStatus',
                        type: 'POST',
                        data: JSON.stringify({ taskId: taskId, status: status }),
                        contentType: 'application/json',
                        success: function (response) {
                            console.log('Task status updated successfully:', response);
                        },
                        error: function (error) {
                            console.log('Error updating task status:', error);
                        }
                    });
                }
            }).disableSelection();
        });


        document.addEventListener('DOMContentLoaded', function () {

            let deleteTaskId;

            // View Task
            document.querySelectorAll('.view-task-btn').forEach(button => {
                button.addEventListener('click', function () {
                    const taskTitle = this.getAttribute('data-task');
                    const taskDescription = this.getAttribute('data-description');
                    const taskCreatedAt = this.getAttribute('data-created-at');

                    document.getElementById('viewTaskTitle').textContent = `Title: ${taskTitle}`;
                    document.getElementById('viewTaskDescription').textContent = `Description: ${taskDescription}`;
                    document.getElementById('viewTaskCreatedAt').textContent = `Created At: ${taskCreatedAt}`;

                    $('#viewTaskModal').modal('show');
                });
            });

            // Edit Task
            document.querySelectorAll('.edit-task-btn').forEach(button => {
                button.addEventListener('click', function () {
                    const taskId = this.getAttribute('data-task-id');
                    const taskTitle = this.getAttribute('data-task');
                    const taskDescription = this.getAttribute('data-description');

                    document.getElementById('editTaskId').value = taskId;
                    document.getElementById('editTaskTitle').value = taskTitle;
                    document.getElementById('editTaskDescription').value = taskDescription;

                    $('#editTaskModal').modal('show');
                });
            });

            // Save Edited Task
            document.getElementById('saveEditTaskBtn').addEventListener('click', function () {
                const taskId = document.getElementById('editTaskId').value;
                const taskTitle = document.getElementById('editTaskTitle').value;
                const taskDescription = document.getElementById('editTaskDescription').value;

                axios.put(`/api/editTask/${taskId}`, {
                    task: taskTitle,
                    description: taskDescription
                })
                    .then(response => {
                        window.location.href = '/'; // Redirect to home page
                    })
                    .catch(error => {
                        console.error('There was an error updating the task:', error);
                        console.log('axios catch');
                    });
            });

            // Show Delete Task Modal with SweetAlert2
            document.querySelectorAll('.delete-task-btn').forEach(button => {
                button.addEventListener('click', function () {
                    deleteTaskId = this.getAttribute('data-task-id');
                    const taskTitle = this.getAttribute('data-task');

                    Swal.fire({
                        title: 'Are you sure?',
                        text: `Do you want to delete the task "${taskTitle}"?`,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6',
                        confirmButtonText: 'Delete'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            axios.delete(`/api/deleteTask/${deleteTaskId}`)
                                .then(response => {
                                    Swal.fire(
                                        'Deleted!',
                                        'Your task has been deleted.',
                                        'success'
                                    ).then(() => {
                                        window.location.href = '/'; // Redirect to home page
                                    });
                                })
                                .catch(error => {
                                    console.error('There was an error deleting the task:', error);
                                    Swal.fire(
                                        'Error!',
                                        'There was an error deleting the task.',
                                        'error'
                                    );
                                });
                        }
                    });
                });
            });
        });
    </script> -->

    <script>
        $(function () {
            $("#sortable1, #sortable2, #sortable3").sortable({
                connectWith: ".connectedSortable",
                stop: function (event, ui) {
                    const senderContainer = event.target;
                    const senderContainerParent = senderContainer.parentElement;
                    const senderContainerTasks = senderContainer.children;
                    const p = document.createElement('p');
                    p.innerText = 'No Task Available';
                    p.classList.add('noTaskMessage');
                    
                    if(senderContainerTasks.length === 0) {
                        senderContainerParent.insertBefore(p, senderContainer);
                    }

                    const receiverContainer = ui.item.parent()[0];
                    const receiverContainerTasks = receiverContainer.children;
                    const receiverContainerParent = receiverContainer.parentElement;
                    const noTaskMessageRef = receiverContainerParent.getElementsByClassName('noTaskMessage')[0];

                    if(receiverContainerTasks.length === 1) {
                        noTaskMessageRef.remove();
                    }

                    const draggedElement = ui.item;
                    const taskId = draggedElement.attr('data-task-id'); // Assuming a data attribute for task ID (optional)

                    // Get the receiver container's data-id attribute
                    const status = ui.item.parent().attr('data-status');

                    console.log(taskId, status);

                    // Send data (draggedElementId, receiverContainerId) to server using AJAX
                    $.ajax({
                        url: '/api/updateStatus',
                        type: 'POST',
                        data: JSON.stringify({ taskId: taskId, status: status }),
                        contentType: 'application/json',
                        success: function (response) {
                            // window.location.reload();
                            // console.log('Task status updated successfully:', response);
                        },
                        error: function (error) {
                            console.log('Error updating task status:', error);
                        }
                    });
                }
            }).disableSelection();
        });

        document.addEventListener('DOMContentLoaded', function () {

            let deleteTaskId;

            // View Task
            document.querySelectorAll('.view-task-btn').forEach(button => {
                button.addEventListener('click', function () {
                    const taskTitle = this.getAttribute('data-task');
                    const taskDescription = this.getAttribute('data-description');
                    const taskCreatedAt = this.getAttribute('data-created-at');

                    document.getElementById('viewTaskTitle').textContent = `Title: ${taskTitle}`;
                    document.getElementById('viewTaskDescription').textContent = `Description: ${taskDescription}`;
                    document.getElementById('viewTaskCreatedAt').textContent = `Created At: ${taskCreatedAt}`;

                    $('#viewTaskModal').modal('show');
                });
            });

            // Edit Task
            document.querySelectorAll('.edit-task-btn').forEach(button => {
                button.addEventListener('click', function () {
                    const taskId = this.getAttribute('data-task-id');
                    const taskTitle = this.getAttribute('data-task');
                    const taskDescription = this.getAttribute('data-description');

                    document.getElementById('editTaskId').value = taskId;
                    document.getElementById('editTaskTitle').value = taskTitle;
                    document.getElementById('editTaskDescription').value = taskDescription;

                    $('#editTaskModal').modal('show');
                });
            });

            // Save Edited Task
            document.getElementById('saveEditTaskBtn').addEventListener('click', function () {
                const taskId = document.getElementById('editTaskId').value;
                const taskTitle = document.getElementById('editTaskTitle').value;
                const taskDescription = document.getElementById('editTaskDescription').value;

                axios.put(`/api/editTask/${taskId}`, {
                    task: taskTitle,
                    description: taskDescription
                })
                    .then(response => {
                        window.location.href = '/'; // Redirect to home page
                    })
                    .catch(error => {
                        console.error('There was an error updating the task:', error);
                        console.log('axios catch');
                    });
                console.log('c');
            });

            // Show Delete Task Modal with SweetAlert2
            document.querySelectorAll('.delete-task-btn').forEach(button => {
                button.addEventListener('click', function () {
                    deleteTaskId = this.getAttribute('data-task-id');
                    const taskTitle = this.getAttribute('data-task');

                    Swal.fire({
                        title: 'Are you sure?',
                        text: `Do you want to delete the task "${taskTitle}"?`,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#d33',
                        cancelButtonColor: '#3085d6',
                        confirmButtonText: 'Delete'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            axios.delete(`/api/deleteTask/${deleteTaskId}`)
                                .then(response => {
                                    Swal.fire(
                                        'Deleted!',
                                        'Your task has been deleted.',
                                        'success'
                                    ).then(() => {
                                        window.location.href = '/'; // Redirect to home page
                                    });
                                })
                                .catch(error => {
                                    console.error('There was an error deleting the task:', error);
                                    Swal.fire(
                                        'Error!',
                                        'There was an error deleting the task.',
                                        'error'
                                    );
                                });
                        }
                    });
                });
            });

            // Search functionality
            document.getElementById('searchQuery').addEventListener('input', function () {
                const query = this.value;
                console.log(query);
                axios.get(`/search?query=${query}`)
                    .then(response => {
                        updateTaskLists(response.data);
                    })
                    .catch(error => {
                        console.error('There was an error performing the search:', error);
                    });
            });

            // Sort functionality
            document.getElementById('sortBy').addEventListener('change', function () {
                const sortBy = this.value;

                axios.get(`/sort?sortBy=${sortBy}`)
                    .then(response => {
                        updateTaskLists(response.data);
                    })
                    .catch(error => {
                        console.error('There was an error performing the sort:', error);
                    });
            });

            function updateTaskLists(tasks) {
                const statusContainers = {
                    todo: document.querySelector('#sortable1'),
                    inProgress: document.querySelector('#sortable2'),
                    done: document.querySelector('#sortable3')
                };

                // Clear existing tasks
                Object.values(statusContainers).forEach(container => container.innerHTML = '');

                // Append new tasks
                tasks.forEach(task => {
                    const taskElement = `
                        <div class="task bg-light p-3 mb-2 rounded" data-task-id="${task._id}">
                            <h5>${task.task}</h5>
                            <p>${task.description}</p>
                            <small>Created at: ${new Date(task.createdAt).toLocaleString()}</small>
                            <div class="mt-2">
                                <button class="btn btn-danger btn-sm delete-task-btn" data-task-id="${task._id}">Delete</button>
                                <button class="btn btn-info btn-sm edit-task-btn" data-task-id="${task._id}" data-task="${task.task}" data-description="${task.description}">Edit</button>
                                <button class="btn btn-secondary btn-sm view-task-btn" data-task-id="${task._id}" data-task="${task.task}" data-description="${task.description}" data-created-at="${new Date(task.createdAt).toLocaleString()}">View Details</button>
                            </div>
                        </div>
                    `;
                    statusContainers[task.status].insertAdjacentHTML('beforeend', taskElement);
                });

                // Reinitialize event listeners for the newly added elements
                initializeEventListeners();
            }

            function initializeEventListeners() {
                document.querySelectorAll('.view-task-btn').forEach(button => {
                    button.addEventListener('click', function () {
                        const taskTitle = this.getAttribute('data-task');
                        const taskDescription = this.getAttribute('data-description');
                        const taskCreatedAt = this.getAttribute('data-created-at');

                        document.getElementById('viewTaskTitle').textContent = `Title: ${taskTitle}`;
                        document.getElementById('viewTaskDescription').textContent = `Description: ${taskDescription}`;
                        document.getElementById('viewTaskCreatedAt').textContent = `Created At: ${taskCreatedAt}`;

                        $('#viewTaskModal').modal('show');
                    });
                });

                document.querySelectorAll('.edit-task-btn').forEach(button => {
                    button.addEventListener('click', function () {
                        const taskId = this.getAttribute('data-task-id');
                        const taskTitle = this.getAttribute('data-task');
                        const taskDescription = this.getAttribute('data-description');

                        document.getElementById('editTaskId').value = taskId;
                        document.getElementById('editTaskTitle').value = taskTitle;
                        document.getElementById('editTaskDescription').value = taskDescription;

                        $('#editTaskModal').modal('show');
                    });
                });

                document.querySelectorAll('.delete-task-btn').forEach(button => {
                    button.addEventListener('click', function () {
                        deleteTaskId = this.getAttribute('data-task-id');
                        const taskTitle = this.getAttribute('data-task');

                        Swal.fire({
                            title: 'Are you sure?',
                            text: `Do you want to delete the task "${taskTitle}"?`,
                            icon: 'warning',
                            showCancelButton: true,
                            confirmButtonColor: '#d33',
                            cancelButtonColor: '#3085d6',
                            confirmButtonText: 'Delete'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                axios.delete(`/api/deleteTask/${deleteTaskId}`)
                                    .then(response => {
                                        Swal.fire(
                                            'Deleted!',
                                            'Your task has been deleted.',
                                            'success'
                                        ).then(() => {
                                            window.location.href = '/'; // Redirect to home page
                                        });
                                    })
                                    .catch(error => {
                                        console.error('There was an error deleting the task:', error);
                                        Swal.fire(
                                            'Error!',
                                            'There was an error deleting the task.',
                                            'error'
                                        );
                                    });
                            }
                        });
                    });
                });
            }
        });

    </script>
</body>

</html>